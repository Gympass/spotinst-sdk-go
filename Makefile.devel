GO           := GO111MODULE=on go
GO_RELEASER  := goreleaser
GIT_DIRTY    := $(shell test -n "`git status --porcelain`" && echo ".CHANGES" || true)
VERSION_FILE := spotinst/version.go
VERSION      := $$(grep 'SDKVersion =' $(VERSION_FILE) | awk '{print $$4}' | xargs)

##@ Development

.PHONY: release
release: test ## Release a new version
ifneq ($(strip $(GIT_DIRTY)),)
	@echo "Git is currently in a dirty state. Please commit your changes or stash them before you release."; exit 1;
else
	read -p "Bump version: $(VERSION) â†’ " version; sed -i "s/$(VERSION)/$$version/g" $(VERSION_FILE) && \
	git commit -am "release: v$(VERSION)" && \
	git tag v$(VERSION) && \
	git push && \
	VERSION=$(VERSION) $(GO_RELEASER) release --rm-dist
endif

.PHONY: test
test: fmt ## Run all tests
	@mkdir -p dist/ && \
	$(GO) test \
		-v $$($(GO) list ./... | grep -v vendor) $(TESTARGS) \
		-covermode=atomic \
		-coverprofile=dist/coverage.txt \
		-race \
		-timeout=30s \
		-parallel=4

.PHONY: cover
cover: test ## Run all tests and open the coverage report
	@$(GO) tool cover -html=dist/coverage.txt

.PHONY: tidy
tidy: ## Add missing and remove unused modules
	@$(GO) mod tidy

.PHONY: vendor
vendor: ## Make vendored copy of all dependencies
	@$(GO) mod vendor

.PHONY: fmt
fmt: ## Format all .go files
	@$(GO) fmt ./...

.PHONY: vet
vet: ## Analyze all .go files
	@$(GO) vet ./...

.PHONY: clean
clean: ## Clean all generated artifacts
	@rm -rf dist
